//
// Rust API for the libfive standard library
//
// DO NOT EDIT BY HAND!
// This file is automatically generated from libfive/stdlib/stdlib.h
//
// It was last generated on 2021-05-09 11:51:48 by user moritz
//


/// ## Csg <a name="csg"></a>
impl Tree {

    pub fn union(self, b: Tree) -> Self {
        Self(unsafe { sys::libfivestd_union(self.0, b.0) })
    }

    pub fn intersection(self, b: Tree) -> Self {
        Self(unsafe { sys::libfivestd_intersection(self.0, b.0) })
    }

    pub fn inverse(self) -> Self {
        Self(unsafe { sys::libfivestd_inverse(self.0) })
    }

    pub fn difference(self, b: Tree) -> Self {
        Self(unsafe { sys::libfivestd_difference(self.0, b.0) })
    }

    pub fn offset(self, o: Tree) -> Self {
        Self(unsafe { sys::libfivestd_offset(self.0, o.0) })
    }

    pub fn clearance(self, b: Tree, offset: Tree) -> Self {
        Self(unsafe { sys::libfivestd_clearance(self.0, b.0, offset.0) })
    }

    pub fn shell(self, offset: Tree) -> Self {
        Self(unsafe { sys::libfivestd_shell(self.0, offset.0) })
    }

    pub fn blend_expt(self, b: Tree, m: Tree) -> Self {
        Self(unsafe { sys::libfivestd_blend_expt(self.0, b.0, m.0) })
    }

    pub fn blend_expt_unit(self, b: Tree, m: Tree) -> Self {
        Self(unsafe { sys::libfivestd_blend_expt_unit(self.0, b.0, m.0) })
    }

    pub fn blend_rough(self, b: Tree, m: Tree) -> Self {
        Self(unsafe { sys::libfivestd_blend_rough(self.0, b.0, m.0) })
    }

    pub fn blend_difference(self, b: Tree, m: Tree, o: Tree) -> Self {
        Self(unsafe { sys::libfivestd_blend_difference(self.0, b.0, m.0, o.0) })
    }

    pub fn morph(self, b: Tree, m: Tree) -> Self {
        Self(unsafe { sys::libfivestd_morph(self.0, b.0, m.0) })
    }

    pub fn loft(self, b: Tree, zmin: Tree, zmax: Tree) -> Self {
        Self(unsafe { sys::libfivestd_loft(self.0, b.0, zmin.0, zmax.0) })
    }

    pub fn loft_between(self, b: Tree, lower: TreeVec3, upper: TreeVec3) -> Self {
        Self(unsafe { sys::libfivestd_loft_between(self.0, b.0, sys::tvec3 { x: lower.x.0, y: lower.x.0, z: lower.x.0 }, sys::tvec3 { x: upper.x.0, y: upper.x.0, z: upper.x.0 }) })
    }
}
/// ## Shapes <a name="shapes"></a>
impl Tree {

    pub fn circle(self, center: TreeVec2) -> Self {
        Self(unsafe { sys::libfivestd_circle(self.0, sys::tvec2 { x: center.x.0, y: center.x.0 }) })
    }

    pub fn ring(self, ri: Tree, center: TreeVec2) -> Self {
        Self(unsafe { sys::libfivestd_ring(self.0, ri.0, sys::tvec2 { x: center.x.0, y: center.x.0 }) })
    }

    pub fn polygon(self, n: u32, center: TreeVec2) -> Self {
        Self(unsafe { sys::libfivestd_polygon(self.0, n.try_into().unwrap(), sys::tvec2 { x: center.x.0, y: center.x.0 }) })
    }

    pub fn rectangle(a: TreeVec2, b: TreeVec2) -> Self {
        Self(unsafe { sys::libfivestd_rectangle(sys::tvec2 { x: a.x.0, y: a.x.0 }, sys::tvec2 { x: b.x.0, y: b.x.0 }) })
    }

    pub fn rounded_rectangle(a: TreeVec2, b: TreeVec2, r: Tree) -> Self {
        Self(unsafe { sys::libfivestd_rounded_rectangle(sys::tvec2 { x: a.x.0, y: a.x.0 }, sys::tvec2 { x: b.x.0, y: b.x.0 }, r.0) })
    }

    pub fn rectangle_exact(a: TreeVec2, b: TreeVec2) -> Self {
        Self(unsafe { sys::libfivestd_rectangle_exact(sys::tvec2 { x: a.x.0, y: a.x.0 }, sys::tvec2 { x: b.x.0, y: b.x.0 }) })
    }

    pub fn rectangle_centered_exact(size: TreeVec2, center: TreeVec2) -> Self {
        Self(unsafe { sys::libfivestd_rectangle_centered_exact(sys::tvec2 { x: size.x.0, y: size.x.0 }, sys::tvec2 { x: center.x.0, y: center.x.0 }) })
    }

    pub fn triangle(a: TreeVec2, b: TreeVec2, c: TreeVec2) -> Self {
        Self(unsafe { sys::libfivestd_triangle(sys::tvec2 { x: a.x.0, y: a.x.0 }, sys::tvec2 { x: b.x.0, y: b.x.0 }, sys::tvec2 { x: c.x.0, y: c.x.0 }) })
    }

    pub fn box_mitered(a: TreeVec3, b: TreeVec3) -> Self {
        Self(unsafe { sys::libfivestd_box_mitered(sys::tvec3 { x: a.x.0, y: a.x.0, z: a.x.0 }, sys::tvec3 { x: b.x.0, y: b.x.0, z: b.x.0 }) })
    }

    pub fn box_mitered_centered(size: TreeVec3, center: TreeVec3) -> Self {
        Self(unsafe { sys::libfivestd_box_mitered_centered(sys::tvec3 { x: size.x.0, y: size.x.0, z: size.x.0 }, sys::tvec3 { x: center.x.0, y: center.x.0, z: center.x.0 }) })
    }

    pub fn box_exact_centered(size: TreeVec3, center: TreeVec3) -> Self {
        Self(unsafe { sys::libfivestd_box_exact_centered(sys::tvec3 { x: size.x.0, y: size.x.0, z: size.x.0 }, sys::tvec3 { x: center.x.0, y: center.x.0, z: center.x.0 }) })
    }

    pub fn box_exact(a: TreeVec3, b: TreeVec3) -> Self {
        Self(unsafe { sys::libfivestd_box_exact(sys::tvec3 { x: a.x.0, y: a.x.0, z: a.x.0 }, sys::tvec3 { x: b.x.0, y: b.x.0, z: b.x.0 }) })
    }

    pub fn rounded_box(a: TreeVec3, b: TreeVec3, r: Tree) -> Self {
        Self(unsafe { sys::libfivestd_rounded_box(sys::tvec3 { x: a.x.0, y: a.x.0, z: a.x.0 }, sys::tvec3 { x: b.x.0, y: b.x.0, z: b.x.0 }, r.0) })
    }

    pub fn sphere(self, center: TreeVec3) -> Self {
        Self(unsafe { sys::libfivestd_sphere(self.0, sys::tvec3 { x: center.x.0, y: center.x.0, z: center.x.0 }) })
    }

    pub fn half_space(norm: TreeVec3, point: TreeVec3) -> Self {
        Self(unsafe { sys::libfivestd_half_space(sys::tvec3 { x: norm.x.0, y: norm.x.0, z: norm.x.0 }, sys::tvec3 { x: point.x.0, y: point.x.0, z: point.x.0 }) })
    }

    pub fn cylinder_z(self, h: Tree, base: TreeVec3) -> Self {
        Self(unsafe { sys::libfivestd_cylinder_z(self.0, h.0, sys::tvec3 { x: base.x.0, y: base.x.0, z: base.x.0 }) })
    }

    pub fn cone_ang_z(self, height: Tree, base: TreeVec3) -> Self {
        Self(unsafe { sys::libfivestd_cone_ang_z(self.0, height.0, sys::tvec3 { x: base.x.0, y: base.x.0, z: base.x.0 }) })
    }

    pub fn cone_z(self, height: Tree, base: TreeVec3) -> Self {
        Self(unsafe { sys::libfivestd_cone_z(self.0, height.0, sys::tvec3 { x: base.x.0, y: base.x.0, z: base.x.0 }) })
    }

    pub fn pyramid_z(a: TreeVec2, b: TreeVec2, zmin: Tree, height: Tree) -> Self {
        Self(unsafe { sys::libfivestd_pyramid_z(sys::tvec2 { x: a.x.0, y: a.x.0 }, sys::tvec2 { x: b.x.0, y: b.x.0 }, zmin.0, height.0) })
    }

    pub fn torus_z(self, ri: Tree, center: TreeVec3) -> Self {
        Self(unsafe { sys::libfivestd_torus_z(self.0, ri.0, sys::tvec3 { x: center.x.0, y: center.x.0, z: center.x.0 }) })
    }

    pub fn gyroid(period: TreeVec3, thickness: Tree) -> Self {
        Self(unsafe { sys::libfivestd_gyroid(sys::tvec3 { x: period.x.0, y: period.x.0, z: period.x.0 }, thickness.0) })
    }

    pub fn emptiness() -> Self {
        Self(unsafe { sys::libfivestd_emptiness() })
    }

    pub fn array_x(self, nx: u32, dx: Tree) -> Self {
        Self(unsafe { sys::libfivestd_array_x(self.0, nx.try_into().unwrap(), dx.0) })
    }

    pub fn array_xy(self, nx: u32, ny: u32, delta: TreeVec2) -> Self {
        Self(unsafe { sys::libfivestd_array_xy(self.0, nx.try_into().unwrap(), ny.try_into().unwrap(), sys::tvec2 { x: delta.x.0, y: delta.x.0 }) })
    }

    pub fn array_xyz(self, nx: u32, ny: u32, nz: u32, delta: TreeVec3) -> Self {
        Self(unsafe { sys::libfivestd_array_xyz(self.0, nx.try_into().unwrap(), ny.try_into().unwrap(), nz.try_into().unwrap(), sys::tvec3 { x: delta.x.0, y: delta.x.0, z: delta.x.0 }) })
    }

    pub fn array_polar_z(self, n: u32, center: TreeVec2) -> Self {
        Self(unsafe { sys::libfivestd_array_polar_z(self.0, n.try_into().unwrap(), sys::tvec2 { x: center.x.0, y: center.x.0 }) })
    }

    pub fn extrude_z(self, zmin: Tree, zmax: Tree) -> Self {
        Self(unsafe { sys::libfivestd_extrude_z(self.0, zmin.0, zmax.0) })
    }
}
/// ## Transforms <a name="transforms"></a>
impl Tree {

    pub fn moveit(self, offset: TreeVec3) -> Self {
        Self(unsafe { sys::libfivestd_move(self.0, sys::tvec3 { x: offset.x.0, y: offset.x.0, z: offset.x.0 }) })
    }

    pub fn reflect_x(self, x0: Tree) -> Self {
        Self(unsafe { sys::libfivestd_reflect_x(self.0, x0.0) })
    }

    pub fn reflect_y(self, y0: Tree) -> Self {
        Self(unsafe { sys::libfivestd_reflect_y(self.0, y0.0) })
    }

    pub fn reflect_z(self, z0: Tree) -> Self {
        Self(unsafe { sys::libfivestd_reflect_z(self.0, z0.0) })
    }

    pub fn reflect_xy(self) -> Self {
        Self(unsafe { sys::libfivestd_reflect_xy(self.0) })
    }

    pub fn reflect_yz(self) -> Self {
        Self(unsafe { sys::libfivestd_reflect_yz(self.0) })
    }

    pub fn reflect_xz(self) -> Self {
        Self(unsafe { sys::libfivestd_reflect_xz(self.0) })
    }

    pub fn symmetric_x(self) -> Self {
        Self(unsafe { sys::libfivestd_symmetric_x(self.0) })
    }

    pub fn symmetric_y(self) -> Self {
        Self(unsafe { sys::libfivestd_symmetric_y(self.0) })
    }

    pub fn symmetric_z(self) -> Self {
        Self(unsafe { sys::libfivestd_symmetric_z(self.0) })
    }

    pub fn scale_x(self, sx: Tree, x0: Tree) -> Self {
        Self(unsafe { sys::libfivestd_scale_x(self.0, sx.0, x0.0) })
    }

    pub fn scale_y(self, sy: Tree, y0: Tree) -> Self {
        Self(unsafe { sys::libfivestd_scale_y(self.0, sy.0, y0.0) })
    }

    pub fn scale_z(self, sz: Tree, z0: Tree) -> Self {
        Self(unsafe { sys::libfivestd_scale_z(self.0, sz.0, z0.0) })
    }

    pub fn scale_xyz(self, s: TreeVec3, center: TreeVec3) -> Self {
        Self(unsafe { sys::libfivestd_scale_xyz(self.0, sys::tvec3 { x: s.x.0, y: s.x.0, z: s.x.0 }, sys::tvec3 { x: center.x.0, y: center.x.0, z: center.x.0 }) })
    }

    pub fn rotate_x(self, angle: Tree, center: TreeVec3) -> Self {
        Self(unsafe { sys::libfivestd_rotate_x(self.0, angle.0, sys::tvec3 { x: center.x.0, y: center.x.0, z: center.x.0 }) })
    }

    pub fn rotate_y(self, angle: Tree, center: TreeVec3) -> Self {
        Self(unsafe { sys::libfivestd_rotate_y(self.0, angle.0, sys::tvec3 { x: center.x.0, y: center.x.0, z: center.x.0 }) })
    }

    pub fn rotate_z(self, angle: Tree, center: TreeVec3) -> Self {
        Self(unsafe { sys::libfivestd_rotate_z(self.0, angle.0, sys::tvec3 { x: center.x.0, y: center.x.0, z: center.x.0 }) })
    }

    pub fn taper_x_y(self, base: TreeVec2, h: Tree, scale: Tree, base_scale: Tree) -> Self {
        Self(unsafe { sys::libfivestd_taper_x_y(self.0, sys::tvec2 { x: base.x.0, y: base.x.0 }, h.0, scale.0, base_scale.0) })
    }

    pub fn taper_xy_z(self, base: TreeVec3, height: Tree, scale: Tree, base_scale: Tree) -> Self {
        Self(unsafe { sys::libfivestd_taper_xy_z(self.0, sys::tvec3 { x: base.x.0, y: base.x.0, z: base.x.0 }, height.0, scale.0, base_scale.0) })
    }

    pub fn shear_x_y(self, base: TreeVec2, height: Tree, offset: Tree, base_offset: Tree) -> Self {
        Self(unsafe { sys::libfivestd_shear_x_y(self.0, sys::tvec2 { x: base.x.0, y: base.x.0 }, height.0, offset.0, base_offset.0) })
    }

    pub fn repel(self, locus: TreeVec3, radius: Tree, exaggerate: Tree) -> Self {
        Self(unsafe { sys::libfivestd_repel(self.0, sys::tvec3 { x: locus.x.0, y: locus.x.0, z: locus.x.0 }, radius.0, exaggerate.0) })
    }

    pub fn repel_x(self, locus: TreeVec3, radius: Tree, exaggerate: Tree) -> Self {
        Self(unsafe { sys::libfivestd_repel_x(self.0, sys::tvec3 { x: locus.x.0, y: locus.x.0, z: locus.x.0 }, radius.0, exaggerate.0) })
    }

    pub fn repel_y(self, locus: TreeVec3, radius: Tree, exaggerate: Tree) -> Self {
        Self(unsafe { sys::libfivestd_repel_y(self.0, sys::tvec3 { x: locus.x.0, y: locus.x.0, z: locus.x.0 }, radius.0, exaggerate.0) })
    }

    pub fn repel_z(self, locus: TreeVec3, radius: Tree, exaggerate: Tree) -> Self {
        Self(unsafe { sys::libfivestd_repel_z(self.0, sys::tvec3 { x: locus.x.0, y: locus.x.0, z: locus.x.0 }, radius.0, exaggerate.0) })
    }

    pub fn repel_xy(self, locus: TreeVec3, radius: Tree, exaggerate: Tree) -> Self {
        Self(unsafe { sys::libfivestd_repel_xy(self.0, sys::tvec3 { x: locus.x.0, y: locus.x.0, z: locus.x.0 }, radius.0, exaggerate.0) })
    }

    pub fn repel_yz(self, locus: TreeVec3, radius: Tree, exaggerate: Tree) -> Self {
        Self(unsafe { sys::libfivestd_repel_yz(self.0, sys::tvec3 { x: locus.x.0, y: locus.x.0, z: locus.x.0 }, radius.0, exaggerate.0) })
    }

    pub fn repel_xz(self, locus: TreeVec3, radius: Tree, exaggerate: Tree) -> Self {
        Self(unsafe { sys::libfivestd_repel_xz(self.0, sys::tvec3 { x: locus.x.0, y: locus.x.0, z: locus.x.0 }, radius.0, exaggerate.0) })
    }

    pub fn attract(self, locus: TreeVec3, radius: Tree, exaggerate: Tree) -> Self {
        Self(unsafe { sys::libfivestd_attract(self.0, sys::tvec3 { x: locus.x.0, y: locus.x.0, z: locus.x.0 }, radius.0, exaggerate.0) })
    }

    pub fn attract_x(self, locus: TreeVec3, radius: Tree, exaggerate: Tree) -> Self {
        Self(unsafe { sys::libfivestd_attract_x(self.0, sys::tvec3 { x: locus.x.0, y: locus.x.0, z: locus.x.0 }, radius.0, exaggerate.0) })
    }

    pub fn attract_y(self, locus: TreeVec3, radius: Tree, exaggerate: Tree) -> Self {
        Self(unsafe { sys::libfivestd_attract_y(self.0, sys::tvec3 { x: locus.x.0, y: locus.x.0, z: locus.x.0 }, radius.0, exaggerate.0) })
    }

    pub fn attract_z(self, locus: TreeVec3, radius: Tree, exaggerate: Tree) -> Self {
        Self(unsafe { sys::libfivestd_attract_z(self.0, sys::tvec3 { x: locus.x.0, y: locus.x.0, z: locus.x.0 }, radius.0, exaggerate.0) })
    }

    pub fn attract_xy(self, locus: TreeVec3, radius: Tree, exaggerate: Tree) -> Self {
        Self(unsafe { sys::libfivestd_attract_xy(self.0, sys::tvec3 { x: locus.x.0, y: locus.x.0, z: locus.x.0 }, radius.0, exaggerate.0) })
    }

    pub fn attract_yz(self, locus: TreeVec3, radius: Tree, exaggerate: Tree) -> Self {
        Self(unsafe { sys::libfivestd_attract_yz(self.0, sys::tvec3 { x: locus.x.0, y: locus.x.0, z: locus.x.0 }, radius.0, exaggerate.0) })
    }

    pub fn attract_xz(self, locus: TreeVec3, radius: Tree, exaggerate: Tree) -> Self {
        Self(unsafe { sys::libfivestd_attract_xz(self.0, sys::tvec3 { x: locus.x.0, y: locus.x.0, z: locus.x.0 }, radius.0, exaggerate.0) })
    }

    pub fn revolve_y(self, x0: Tree) -> Self {
        Self(unsafe { sys::libfivestd_revolve_y(self.0, x0.0) })
    }

    pub fn twirl_x(self, amount: Tree, radius: Tree, center: TreeVec3) -> Self {
        Self(unsafe { sys::libfivestd_twirl_x(self.0, amount.0, radius.0, sys::tvec3 { x: center.x.0, y: center.x.0, z: center.x.0 }) })
    }

    pub fn twirl_axis_x(self, amount: Tree, radius: Tree, center: TreeVec3) -> Self {
        Self(unsafe { sys::libfivestd_twirl_axis_x(self.0, amount.0, radius.0, sys::tvec3 { x: center.x.0, y: center.x.0, z: center.x.0 }) })
    }

    pub fn twirl_y(self, amount: Tree, radius: Tree, center: TreeVec3) -> Self {
        Self(unsafe { sys::libfivestd_twirl_y(self.0, amount.0, radius.0, sys::tvec3 { x: center.x.0, y: center.x.0, z: center.x.0 }) })
    }

    pub fn twirl_axis_y(self, amount: Tree, radius: Tree, center: TreeVec3) -> Self {
        Self(unsafe { sys::libfivestd_twirl_axis_y(self.0, amount.0, radius.0, sys::tvec3 { x: center.x.0, y: center.x.0, z: center.x.0 }) })
    }

    pub fn twirl_z(self, amount: Tree, radius: Tree, center: TreeVec3) -> Self {
        Self(unsafe { sys::libfivestd_twirl_z(self.0, amount.0, radius.0, sys::tvec3 { x: center.x.0, y: center.x.0, z: center.x.0 }) })
    }

    pub fn twirl_axis_z(self, amount: Tree, radius: Tree, center: TreeVec3) -> Self {
        Self(unsafe { sys::libfivestd_twirl_axis_z(self.0, amount.0, radius.0, sys::tvec3 { x: center.x.0, y: center.x.0, z: center.x.0 }) })
    }
}
/// ## Text <a name="text"></a>
impl Tree {

    pub fn text(txt: &CStr, pos: TreeVec2) -> Self {
        Self(unsafe { sys::libfivestd_text(txt.as_ptr(), sys::tvec2 { x: pos.x.0, y: pos.x.0 }) })
    }
}