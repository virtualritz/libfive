import os
from datetime import datetime

import parse

################################################################################
def arg_in(a):
    if a.type in ['libfive_tree', 'tfloat']:
        if a.index == 0:
            return 'self'
        else:
            return '{}: Tree'.format(a.name)
    elif a.type == 'tvec2':
        return '{}: TreeVec2'.format(a.name)
    elif a.type == 'tvec3':
        return '{}: TreeVec3'.format(a.name)
    elif a.type == 'int':
        return '{}: u32'.format(a.name)
    elif a.type == 'const char*':
        return '{}: &CStr'.format(a.name)
    else:
        raise RuntimeError("Unknown type %s" % a.type)

def arg_out(a):
    if a.type in ['libfive_tree', 'tfloat']:
        if a.index == 0:
            return 'self.0'
        else:
            return '{}.0'.format(a.name)
    elif a.type == 'tvec2':
        return 'sys::tvec2 {{ x: {0}.x.0, y: {0}.x.0 }}'.format(a.name)
    elif a.type == 'tvec3':
        return 'sys::tvec3 {{ x: {0}.x.0, y: {0}.x.0, z: {0}.x.0 }}'.format(a.name)
    elif a.type == 'int':
        return '{}.try_into().unwrap()'.format(a.name)
    elif a.type == 'const char*':
        return '{}.as_ptr()'.format(a.name)
    else:
        raise RuntimeError("Unknown type %s" % a.type)

def format_module_stdlib(lib, m):
    out = '''
/// ## {} <a name="{}"></a>
impl Tree {{
'''.format(m.title(), m)

    for f in lib[m].shapes:
        args_in = ", ".join(map(arg_in, f.args))
        args_out = ", ".join(map(arg_out, f.args))
        out += '''
    pub fn {name}({args_in}) -> Self {{
        Self(unsafe {{ sys::{raw_name}{u}({args_out}) }})
    }}
'''.format(name='moveit' if f.name.endswith('move') else f.name,
           raw_name=f.raw_name,
           u='',
           args_in=args_in,
           args_out=args_out)

    out += '}'
    return out

################################################################################

def arg_call(a):
    if a.type == 'libfive_tree':
        return 'libfive::Tree'
    elif a.type == 'tfloat':
        return 'TreeFloat' # same as float
    elif a.type == 'tvec2':
        return 'TreeVec2'
    elif a.type == 'tvec3':
        return 'TreeVec3'
    elif a.type in ['float', 'int', 'const char*']:
        return a.type
    else:
        raise RuntimeError("Unknown arg type {}".format(a.type))


################################################################################

stdlib = parse.parse_stdlib()

with open('stdlib.rs', 'w') as f:
    f.write(
'''//
// Rust API for the libfive standard library
//
// DO NOT EDIT BY HAND!
// This file is automatically generated from libfive/stdlib/stdlib.h
//
// It was last generated on {} by user {}
//

'''.format(datetime.now().strftime("%Y-%m-%d %H:%M:%S"), os.getlogin()))
    for m in stdlib:
        f.write(format_module_stdlib(stdlib, m))
